apply plugin: 'com.android.library'

def versionId = "3.1.63"

def isTest = false
List<String> names = gradle.startParameter.taskNames
for (String name : names) {
    if (name.toLowerCase().contains("test")) {
        isTest = true;
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        multiDexEnabled = isTest

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    lintOptions {
        lintConfig file("../config/lint/default.xml")
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'

    // glide image library
    api "com.github.bumptech.glide:glide:$rootProject.ext.glideVersion"

    // play services
    api "com.google.android.gms:play-services-cast-framework:16.1.2"

    api "androidx.work:work-runtime:2.0.1"

    // arch
    api 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    api 'androidx.room:room-runtime:2.1.0'

    // support libraries
    api 'androidx.core:core:1.0.2'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.appcompat:appcompat:1.0.2'
    api 'androidx.mediarouter:mediarouter:1.0.0'
    api 'androidx.recyclerview:recyclerview:1.0.0'
    api 'com.google.android.material:material:1.0.0'

    compileOnly ('androidx.databinding:databinding-runtime:3.4.1') {
        exclude group: "androidx.databinding"
    }
    compileOnly 'androidx.databinding:databinding-common:3.4.1'

    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.1.0'

    // exoplayer
    api "com.google.android.exoplayer:exoplayer:$rootProject.ext.exoPlayerVersion"

    // okhttp3
    api 'com.squareup.okhttp3:okhttp:' + rootProject.ext.okHttpVersion

    // Testing-only dependencies
    androidTestImplementation ('androidx.test:runner:1.1.0') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ('androidx.test:rules:1.1.0') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-core:3.1.0') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-intents:3.1.0') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-contrib:3.1.0') {
        exclude group: "com.android.support", module: "appcompat"
        exclude group: "com.android.support", module: "appcompat-v7"
        exclude group: "com.android.support", module: "design"
        exclude group: "com.android.support", module: "support-v4"
        exclude group: "com.android.support", module: "support-annotations"
        exclude module: "recyclerview-v7"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-web:3.1.0') {
        exclude group: "com.android.support", module: "appcompat"
        exclude group: "com.android.support", module: "appcompat-v7"
        exclude group: "com.android.support", module: "support-annotations"
    }

}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'nuclei3-android'

    publishedGroupId = 'nuclei3.android'
    libraryName = 'Nuclei Android'
    artifact = 'nuclei-android'

    libraryDescription = 'UI, Tasks/Threads, Media, and Persistence Library for Android'

    siteUrl = 'https://github.com/lifechurch/nuclei-android/'
    gitUrl = 'https://github.com/lifechurch/nuclei-android/'

    libraryVersion = versionId

    developerId = 'lifechurch'
    developerName = 'Life.Church'
    developerEmail = 'developers@youversion.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply from: '../bintray.gradle'
apply from: '../maven.gradle'

System.out.println("********** MULTIDEX: " + android.defaultConfig.multiDexEnabled)
